plugins {
    id 'com.android.application'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "me.chester.minitruco"
        minSdkVersion 16
        targetSdkVersion 33
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    namespace 'me.chester.minitruco'

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                outputs.upToDateWhen { false }
                events "passed", "failed", "skipped", "standardError"
                showCauses true
                showExceptions true
            }
        }
    }

    buildFeatures {
        buildConfig true
    }
}

configurations {
    // Configuração personalizada para resolver dependências de teste
    customTestRuntime {
        canBeResolved = true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'com.jaredrummler:colorpicker:1.1.0'
    implementation project(path: ':core')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0-M1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0-M1'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'org.mockito:mockito-inline:5.0.0'
    customTestRuntime 'org.evosuite:evosuite-standalone-runtime:1.0.6'

}

// Tarefa personalizada para gerar testes para todas as classes
tasks.register('generateTestsForAllClasses', DefaultTask) {
    doFirst {
        def classesDir = file("${project.buildDir}/intermediates/classes/debug")
        def testClasspath = configurations.customTestRuntime.asPath
        def classFiles = fileTree(dir: classesDir, include: '**/*.class')

        classFiles.each { File classFile ->
            def className = classFile.relativePath.toString().replace('.class', '').replace('/', '.')
            if (className.startsWith('me.chester.minitruco')) { // Ajuste o filtro para o pacote base correto
                exec {
                    commandLine 'java', '-cp', "${testClasspath}:${classesDir}", 'org.evosuite.EvoSuite',
                        '-class', className,
                        '-projectCP', classesDir,
                        '-Dsearch_budget=60', // Tempo máximo de busca em segundos
                        '-Dtest_case_gen=ALL' // Tipo de geração de casos de teste
                }
            }
        }
    }
}
